迪克斯特拉算法案例 python实现
#search neighbourhood
graph={}
graph['start']={}
graph['start']['a']=6
graph['start']['b']=2
graph['a']={}
graph['a']['fin']=1
graph['b']={}
graph['b']['a']=3
graph['b']['fin']=5
graph['fin']={}
#caculate costs
infinity=float('inf')
costs={}
costs['a']=6
costs['b']=2
costs['fin']=infinity
#store parents node
parents={}
parents['a']='start'
parents['b']='start'
parents['fin']=None
#create a list to record solved node
processed=[]

def find_min(costs):
    lowest_cost=float('inf')
    lowest_node=None
    for node in costs:
        cost=costs[node]
        if lowest_cost>cost and node not in processed:
            lowest_cost=cost
            lowest_node=node
    return lowest_node

node=find_min(costs)
while node is not None:
    cost=costs[node]
    neighbors=graph[node]
    for n in neighbors.keys():
        new_cost=cost+neighbors[n]
        if new_cost<costs[n]:
            costs[n]=new_cost
            parents[n]=node
    processed.append(node)
    node=find_min(costs)
    
print(costs['fin'])
